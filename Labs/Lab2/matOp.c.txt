#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <time.h>
#include "matOp.h"

int main(int argc, char** argv){
	MPI_Init(NULL, NULL);
	srand(time(NULL));
	int world;
	MPI_Comm comm = MPI_COMM_WORLD;
	MPI_Comm_size(comm, &world);
	int rank;
	MPI_Comm_rank(comm, &rank);
	struct mat matA, matB, solution, result;
	int doAdd, doMulti;
	initMat(&matA, atoi(argv[1]), atoi(argv[2]), 1);
	initMat(&matB, atoi(argv[3]), atoi(argv[4]), 1);
	if(rank == 0){
		printf("\033c");
		printf("Matrix A\n");
		printMat(&matA);
		printf("\nMatrix B\n");
		printMat(&matB);
		
		initMat(&solution, matA.rows, matB.cols, 0);
		addMatS(&matA, &matB, &solution);
		if(rank == 0){
			puts("\nSolution of A + B");
			printMat(&solution);
		}
		
		initMat(&result, matA.rows, matB.cols, 0);
		addMatP(&matA, &matB, &result, comm, world, rank);
		if(rank == 0){
			puts("\nResult of A + B");
			printMat(&result);
			free(result.arr);
			free(solution.arr);
		}
		
		initMat(&solution, matA.rows, matB.cols, 0);
		subMatS(&matA, &matB, &solution);
		if(rank == 0){
			puts("\nSolution of A - B");
			printMat(&solution);
		}
		
		initMat(&result, matA.rows, matB.cols, 0);
		subMatP(&matA, &matB, &result, comm, world, rank);
		if(rank == 0){
			puts("\nResult of A - B");
			printMat(&result);
			free(result.arr);
			free(solution.arr);
		}
		
		initMat(&solution, matA.rows, matB.cols, 0);
		subMatS(&matB, &matA, &solution);
		if(rank == 0){
			puts("\nSolution of B - A");
			printMat(&solution);
		}

		initMat(&result, matA.rows, matB.cols, 0);
		subMatP(&matB, &matA, &result, comm, world, rank);
		if(rank == 0){
			puts("\nResult of B - A");
			printMat(&result);
			free(result.arr);
			free(solution.arr);
		}

		initMat(&solution, matA.rows, matB.cols, 0);
		multiMatS(&matA, &matB, &solution);
		if(rank == 0){
			puts("\nSolution of A * B");
			printMat(&solution);
		}
		
		initMat(&result, matA.rows, matB.cols, 0);
		multiMatP(&matA, &matB, &result, comm, world, rank);
		if(rank == 0){
			puts("\nResult of A * B");
			printMat(&result);
			free(result.arr);
			free(solution.arr);
		}

		initMat(&solution, matA.rows, matB.cols, 0);
		multiMatS(&matB, &matA, &solution);
		if(rank == 0){
			puts("\nSolution of B * A");
			printMat(&solution);
		}

		initMat(&result, matA.rows, matB.cols, 0);
		multiMatP(&matB, &matA, &result, comm, world, rank);
		if(rank == 0){
			puts("\nResult of B * A");
			printMat(&result);
			free(result.arr);
			free(solution.arr);
		}

	initMat(&result, matA.cols, matA.rows, 0);
	transposeMatS(&matA, &result);
	if(rank == 0){
		puts("\nResult of A^(T)");
		printMat(&result);
		free(result.arr);
	}

	initMat(&result, matB.cols, matB.rows, 0);
	transposeMatS(&matB, &result);
	if(rank == 0){
		puts("\nResult of B^(T)");
		printMat(&result);
		free(result.arr);
	}

	MPI_Finalize();
	free(matA.arr);
	free(matB.arr);

	return 0;

}